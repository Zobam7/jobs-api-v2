openapi: 3.0.0
info:
  title: Jobs API-v2
  contact: {}
  version: '1.0'
servers:
- url: https://jobs-api-v2.onrender.com/api/v1
  variables: {}
paths:
  /auth/register:
    post:
      tags:
      - Auth
      summary: Register New User
      operationId: RegisterNewUser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/RegisterNewUserRequest'
              - example:
                  name: John Doe
                  email: johndoe@gmail.com
                  password: password
            example:
              name: John Doe
              email: johndoe@gmail.com
              password: password
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /auth/login:
    post:
      tags:
      - Auth
      summary: Login User
      operationId: LoginUser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/LoginUserRequest'
              - example:
                  email: johndoe@gmail.com
                  password: password
            example:
              email: johndoe@gmail.com
              password: password
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /jobs:
    get:
      tags:
      - Jobs
      summary: Get all jobs created by the User
      operationId: GetalljobscreatedbytheUser
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    post:
      tags:
      - Jobs
      summary: Create a Job
      operationId: CreateaJob
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/CreateaJobRequest'
              - example:
                  company: Meta
                  role: Backend Web Developer
                  jobtype: part-time
            example:
              company: Meta
              role: Backend Web Developer
              jobtype: part-time
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /jobs/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The job ID
    get:
      tags:
      - Jobs
      summary: Get Single Job
      operationId: GetSingleJob
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    patch:
      tags:
      - Jobs
      summary: Update a Job
      operationId: UpdateaJob
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UpdateaJobRequest'
              - example:
                  company: Amazon
            example:
              company: Amazon
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    delete:
      tags:
      - Jobs
      summary: Delete a Job
      operationId: DeleteaJob
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /alljobs:
    get:
      tags:
      - Get All Jobs
      summary: Get all Jobs
      operationId: GetallJobs
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
components:
  schemas:
    RegisterNewUserRequest:
      title: RegisterNewUserRequest
      required:
      - name
      - email
      - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: John Doe
        email: johndoe@gmail.com
        password: password
    LoginUserRequest:
      title: LoginUserRequest
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: johndoe@gmail.com
        password: password
    CreateaJobRequest:
      title: CreateaJobRequest
      required:
      - company
      - role
      - jobtype
      type: object
      properties:
        company:
          type: string
        role:
          type: string
        jobtype:
          type: string
      example:
        company: Meta
        role: Backend Web Developer
        jobtype: part-time
    UpdateaJobRequest:
      title: UpdateaJobRequest
      required:
      - company
      type: object
      properties:
        company:
          type: string
      example:
        company: Amazon
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []
tags:
- name: Auth
  description: ''
- name: Get All Jobs
  description: 'Get all Jobs available(Public Route)'
- name: Jobs
  description: 'Perform Crud Operations on Jobs(Private Route)'